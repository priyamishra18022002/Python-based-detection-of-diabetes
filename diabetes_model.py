# -*- coding: utf-8 -*-
"""Diabetes_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFT1sPfnf53Klw0i89R8LI8tos_SCfxJ

Importing the Dependecies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis
(PIMA Diabetes Dataset)
"""

#Loading the Diabetes Dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#Printing the first 5 rows of the DataSet
diabetes_dataset.head()

#Number of Rows and Columns in this DataSet
diabetes_dataset.shape

#Getting the Statistical Measures of the Data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#Seperating the Date and Labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

#Training the Support Vector Machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#Accuracy Score on the Training Data
X_train_prediction = classifier.predict(X_train) 
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy Score of the Training Data - ', training_data_accuracy)

#Accuracy Score on the Test Data
X_test_prediction = classifier.predict(X_test) 
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy Score of the Test Data - ', testing_data_accuracy)

"""Making a Predictive System"""

input_data = (0,137,40,35,168,43.1,2.288,33)

#Changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#Reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1 , -1)

#Standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if prediction[0] == 0:
  print("Non Diabetic") 
else:
  print("Diabetic")

